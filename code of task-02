{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOWhhWSvPdh5uw3CB3BIg+7",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chandan7464/codsoft-task-02/blob/main/code%20of%20task-02\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "oa-d6OZ0kAii"
      },
      "outputs": [],
      "source": [
        "def print_board(board):\n",
        "    for row in board:\n",
        "        print(\" | \".join(row))\n",
        "        print(\"-\" * 5)\n",
        "\n",
        "def create_board():\n",
        "    return [[' ' for _ in range(3)] for _ in range(3)]\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def check_winner(board):\n",
        "    # Check rows and columns\n",
        "    for i in range(3):\n",
        "        if board[i][0] == board[i][1] == board[i][2] != ' ':\n",
        "            return board[i][0]\n",
        "        if board[0][i] == board[1][i] == board[2][i] != ' ':\n",
        "            return board[0][i]\n",
        "\n",
        "    # Check diagonals\n",
        "    if board[0][0] == board[1][1] == board[2][2] != ' ':\n",
        "        return board[0][0]\n",
        "    if board[0][2] == board[1][1] == board[2][0] != ' ':\n",
        "        return board[0][2]\n",
        "\n",
        "    # Check for draw\n",
        "    if all(board[i][j] != ' ' for i in range(3) for j in range(3)):\n",
        "        return 'Draw'\n",
        "\n",
        "    return None\n"
      ],
      "metadata": {
        "id": "2z98p5k8kIJl"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def minimax(board, depth, is_maximizing):\n",
        "    winner = check_winner(board)\n",
        "    if winner == 'X':\n",
        "        return 1\n",
        "    elif winner == 'O':\n",
        "        return -1\n",
        "    elif winner == 'Draw':\n",
        "        return 0\n",
        "\n",
        "    if is_maximizing:\n",
        "        best_score = -float('inf')\n",
        "        for i in range(3):\n",
        "            for j in range(3):\n",
        "                if board[i][j] == ' ':\n",
        "                    board[i][j] = 'X'\n",
        "                    score = minimax(board, depth + 1, False)\n",
        "                    board[i][j] = ' '\n",
        "                    best_score = max(score, best_score)\n",
        "        return best_score\n",
        "    else:\n",
        "        best_score = float('inf')\n",
        "        for i in range(3):\n",
        "            for j in range(3):\n",
        "                if board[i][j] == ' ':\n",
        "                    board[i][j] = 'O'\n",
        "                    score = minimax(board, depth + 1, True)\n",
        "                    board[i][j] = ' '\n",
        "                    best_score = min(score, best_score)\n",
        "        return best_score\n"
      ],
      "metadata": {
        "id": "xj9hFxurkNFi"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def best_move(board):\n",
        "    best_score = -float('inf')\n",
        "    move = None\n",
        "    for i in range(3):\n",
        "        for j in range(3):\n",
        "            if board[i][j] == ' ':\n",
        "                board[i][j] = 'X'\n",
        "                score = minimax(board, 0, False)\n",
        "                board[i][j] = ' '\n",
        "                if score > best_score:\n",
        "                    best_score = score\n",
        "                    move = (i, j)\n",
        "    return move\n"
      ],
      "metadata": {
        "id": "XzSgcH5ekQ2A"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def play_game():\n",
        "    board = create_board()\n",
        "    print(\"Welcome to Tic-Tac-Toe!\")\n",
        "    print_board(board)\n",
        "\n",
        "    while True:\n",
        "        # Human move\n",
        "        row, col = map(int, input(\"Enter your move (row and column): \").split())\n",
        "        if board[row][col] == ' ':\n",
        "            board[row][col] = 'O'\n",
        "        else:\n",
        "            print(\"Invalid move. Try again.\")\n",
        "            continue\n",
        "\n",
        "        print_board(board)\n",
        "\n",
        "        if check_winner(board) is not None:\n",
        "            break\n",
        "\n",
        "        # AI move\n",
        "        move = best_move(board)\n",
        "        if move:\n",
        "            board[move[0]][move[1]] = 'X'\n",
        "\n",
        "        print_board(board)\n",
        "\n",
        "        if check_winner(board) is not None:\n",
        "            break\n",
        "\n",
        "    winner = check_winner(board)\n",
        "    if winner == 'Draw':\n",
        "        print(\"It's a draw!\")\n",
        "    else:\n",
        "        print(f\"{winner} wins!\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    play_game()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qy2Md9zYkVVF",
        "outputId": "19f44d67-9194-4768-f32d-58889d6b2d73"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to Tic-Tac-Toe!\n",
            "  |   |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "Enter your move (row and column): 0 0\n",
            "O |   |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "O |   |  \n",
            "-----\n",
            "  | X |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n"
          ]
        }
      ]
    }
  ]
}